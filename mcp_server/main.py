# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:41:34+00:00



import argparse
import json
import os
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBearer
from fastapi import UploadFile

from models import (
    AddNewCollaboratorRequest,
    CachePostRequest,
    CollaboratorBulkUpdateRequest,
    CollaboratorsPostResponse,
    CreateSessionRequest,
    EnvironmentGetResponse,
    FieldDatamodelCodeGeneratorRootSpecialGetResponse,
    FieldIdCollaboratorsGetResponse,
    FieldIdEventsGetResponse,
    FieldIdEventsPostResponse,
    FieldIdMessagesGetResponse,
    FieldIdSessionsGetResponse,
    FileUpload,
    ManageEvent,
    ModifyInactiveCollaborator,
    Outline,
    PermissionTypesGetResponse,
    ProblemDetail,
    Session,
    SessionsSessionIdViewsGetResponse,
    SessionsSessionIdViewsPostRequest,
    Status,
    Story,
    StoryCollaborator,
    View,
)

app = MCPProxy(
    description='This API is the main entry point for creating, editing and publishing analytics throught the Presalytics API',
    title='Story',
    version='0.3.1',
    servers=[{'url': '/story'}],
)


@app.get(
    '/#-datamodel-code-generator-#-root-#-special-#',
    description=""" Returns a list of stories for this user identifie via the access token presentated to the api """,
    tags=['story_management', 'story_outline_operations'],
)
def story_get(
    include_relationships: Optional[bool] = None, include_outline: Optional[bool] = None
):
    """
    Story: Get List of User Stories
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/#-datamodel-code-generator-#-root-#-special-#',
    description=""" Upload new story to presalytics api """,
    tags=['story_management', 'story_outline_operations', 'story_file_operations'],
)
def story_post(include_outline: Optional[bool] = None, body: Outline = ...):
    """
    Story: Upload
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/cache',
    description=""" An endpoint for Presalytics Renderers to cache html subdocuments for subsequent retrieval by the browser.  Documents Are retrieved via token expire after 1 minute. """,
    tags=['cache_management'],
)
def cache_post(body: CachePostRequest):
    """
    Cache: Store Subdocument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/cache/{nonce}',
    description=""" An endpoint for broswer retreive html documents that were cached durin the rendering process via a nonce (token) """,
    tags=['cache_management'],
)
def cache_nonce_get(nonce: UUID):
    """
    Cache: Get Subdocument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/collaborators',
    description=""" Allows for bulk updates on collaborator metadata.  Restricted to internal admins """,
    tags=['collaborator_management', 'authorization_management'],
)
def collaborators_post(body: CollaboratorBulkUpdateRequest):
    """
    Collborators: Bulk Update (Admin Only)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/environment/',
    description=""" pass rendering metadata to the client-side scripts """,
    tags=['environment_retrieval'],
)
def get_environment():
    """
    Environment: Get
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/file',
    description=""" Upload new story to presalytics api via an Open Office Xml file """,
    tags=['story_file_operations', 'story_management'],
)
def story_post_file(include_outline: Optional[bool] = None, file: UploadFile = ...):
    """
    Story: Upload a File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/file/json',
    description=""" Upload new story to presalytics api via an Open Office Xml file """,
    tags=['story_file_operations', 'story_management'],
)
def story_post_file_json(
    include_outline: Optional[bool] = None, body: FileUpload = None
):
    """
    Story: Upload a File (base64)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/no_tags_spec',
    description=""" json-formatted version of this spec with the tags removed to help with codegen processes """,
    tags=['story_management'],
)
def spec_no_tags():
    """
    Specification: No tags
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/outline-schema/{schema_version}/story-outline.json',
    description=""" Json Schema for validating Story Outline objects """,
    tags=['story_schema_management', 'story_outline_operations'],
)
def story_outline_schema(schema_version: str):
    """
    Story Outline Schema
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/permission_types',
    description=""" Returns a list of possible user permission types """,
    tags=['authorization_management', 'collaborator_management'],
)
def story_permission_types_get():
    """
    Permissions: List Permission Types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/sessions/{session_id}',
    description=""" Remove a session and dependant data. """,
    tags=['session_operations', 'story_session_operations'],
)
def session_id_delete(session_id: UUID):
    """
    Sessions: Delete by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sessions/{session_id}',
    description=""" Get session metadata """,
    tags=['session_operations', 'story_session_operations'],
)
def session_id_get(session_id: UUID, include_relationships: Optional[bool] = None):
    """
    Sessions: Get
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/sessions/{session_id}/views',
    description=""" Get data for all views in a session """,
    tags=['session_operations', 'view_operations', 'story_session_operations'],
)
def sessions_id_views_get(session_id: UUID):
    """
    Views: List Session Views
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/sessions/{session_id}/views',
    description=""" Create a page view object for a viewing session """,
    tags=['session_operations', 'view_operations', 'story_session_operations'],
)
def sessions_id_views_post(
    session_id: UUID, body: SessionsSessionIdViewsPostRequest = ...
):
    """
    Views: Create A Session View
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/views/{view_id}',
    description=""" Remove a view and dependant data. """,
    tags=['view_operations', 'story_management'],
)
def views_id_delete(view_id: UUID):
    """
    Views: Delete by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/views/{view_id}',
    description=""" Get view meta data """,
    tags=['view_operations', 'story_management'],
)
def views_id_get(view_id: UUID):
    """
    Views: Get View
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{id}',
    description=""" Remove a story and dependant data. """,
    tags=['story_management'],
)
def story_id_delete(id: UUID):
    """
    Story: Delete by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}',
    description=""" Returns story metadata, inlcuding json object with story outline """,
    tags=['story_management', 'cache_management', 'story_outline_operations'],
)
def story_id_get(
    id: UUID,
    include_relationships: Optional[bool] = None,
    include_outline: Optional[bool] = None,
    full: Optional[bool] = None,
    refresh_cache: Optional[bool] = None,
):
    """
    Story: Get by Id
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{id}',
    description=""" Update story metadata, including story outline """,
    tags=['story_management', 'story_schema_management'],
)
def story_id_put(id: UUID, include_outline: Optional[bool] = None, body: Story = ...):
    """
    Story: Modify
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/analytics',
    description=""" returns an html document containing session and event metrics for the story """,
    tags=['view_operations', 'story_management', 'event_tracking'],
)
def story_id_analytics(id: UUID):
    """
    Story: View Analytics
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/collaborators',
    description=""" Gets a list users that can read or edit this story """,
    tags=['collaborator_management'],
)
def story_id_collaborators_get(id: UUID):
    """
    Story Collaborators: List
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{id}/collaborators',
    description=""" Add a colloborator to this story """,
    tags=['collaborator_management', 'story_management'],
)
def story_id_collaborators_post(id: UUID, body: AddNewCollaboratorRequest = ...):
    """
    Story Collaborators: Add New User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/collaborators/authorize/{story_collaborator_userid}/{permissiontype}',
    description=""" Check whether user have certain types of permissions.  Use http status codes to understand if permission is granted - 204 = Granted, 403 = Forbidden """,
    tags=['collaborator_management', 'authorization_management'],
)
def story_id_collaborators_userid_permissiontype_get(
    id: UUID, story_collaborator_userid: UUID = ..., permissiontype: str = ...
):
    """
    Permissions: Story Authorization for a User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{id}/collaborators/inactive',
    description=""" Edit story permissions for inactive users.  Requires admin rights. """,
    tags=['collaborator_management', 'authorization_management'],
)
def story_id_collaborators_inactive_post(
    id: UUID, body: ModifyInactiveCollaborator = ...
):
    """
    Story Collaborators: Edit Inactive User Permission
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{id}/collaborators/{story_collaborator_userid}',
    description=""" Remove a collaborator from this story """,
    tags=['collaborator_management', 'story_management'],
)
def story_id_collaborators_userid_delete(
    id: UUID, story_collaborator_userid: UUID = ...
):
    """
    Story Collaborators: Remove User
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/collaborators/{story_collaborator_userid}',
    description=""" Data to help you understand the access rights of a particular collaborator on this story """,
    tags=['collaborator_management', 'authorization_management'],
)
def story_id_collaborators_userid_get(id: UUID, story_collaborator_userid: UUID = ...):
    """
    Story Collaborators: Access Permissions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/{id}/collaborators/{story_collaborator_userid}',
    description=""" Modify a user's access right to this story (e.g., grant edit permissions) """,
    tags=['collaborator_management', 'authorization_management'],
)
def story_id_collaborators_userid_put(
    id: UUID, story_collaborator_userid: UUID = ..., body: StoryCollaborator = ...
):
    """
    Story Collaborators: Edit Access Rights
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/events',
    description=""" Get a list of Events available to users of this story """,
    tags=['event_tracking'],
)
def story_id_events_get(id: UUID):
    """
    Events: List Events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{id}/events',
    description=""" Add a message to the Story's conversation """,
    tags=['event_tracking'],
)
def story_id_events_post(id: UUID, body: ManageEvent = ...):
    """
    Events: Manage Events
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{id}/file',
    description=""" Upload a file to an existing story """,
    tags=['story_management', 'story_file_operations'],
)
def story_id_file_post(
    id: UUID,
    replace_existing: Optional[bool] = None,
    obsolete_id: Optional[UUID] = None,
    include_outline: Optional[bool] = None,
    file: UploadFile = ...,
):
    """
    Story: Upload a File To Existing Story
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/{id}/file/{ooxml_automation_id}',
    description=""" Deletes a subdcoument of this story (e.g., .pptx, .docx, .xlsx) """,
    tags=['story_management'],
)
def story_id_file_ooxmlautomationid_delete(id: UUID, ooxml_automation_id: UUID = ...):
    """
    Story: Delete Subdocument
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/file/{ooxml_automation_id}',
    description=""" Redtreives updated story as open office xml file (e.g., .pptx, .docx, .xlsx) """,
    tags=['story_file_operations', 'story_management'],
)
def story_id_file_ooxmlautomationid_get(id: UUID, ooxml_automation_id: UUID = ...):
    """
    Story: Download Updated File
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/messages',
    description=""" Get a list of messages that have been send in this story """,
    tags=['story_conversation_management'],
)
def story_id_messages_get(id: UUID):
    """
    Conversation: List Conversation Messages
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{id}/messages',
    description=""" Add a message to the Story's conversation """,
    tags=['story_conversation_management'],
)
def story_id_messages_post(id: UUID, body: str = ...):
    """
    Conversation: Send a Message
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/outline',
    description=""" Returns Story's outline """,
    tags=['story_management', 'story_outline_operations'],
)
def story_id_outline_get(id: UUID):
    """
    Story: Get Story Outline
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{id}/outline',
    description=""" Update a story outline. """,
    tags=['story_outline_operations', 'story_management'],
)
def story_id_outline_post(id: UUID, body: str = ...):
    """
    Story: Post Story Outline
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/public/',
    description=""" returns an html document containing a reveal.js epresentation of the story, if the story if set to is_public = True """,
    tags=['public_story_access', 'story_management'],
)
def story_id_public(id: UUID):
    """
    Story: Public Link to Story Reveal.js Document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/reveal',
    description=""" returns an html document containing a reveal.js epresentation of the story """,
    tags=['story_management', 'view_operations', 'public_story_access'],
)
def story_id_reveal(id: UUID):
    """
    Story: Get Story at Reveal.js Document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/sessions',
    description=""" Get a list of sessions asscoaited with this story """,
    tags=['story_session_operations', 'story_management'],
)
def story_id_sessions_get(id: UUID, include_relationships: Optional[bool] = None):
    """
    Sessions: List Story Sessions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/{id}/sessions',
    description=""" Create a new session """,
    tags=['session_operations', 'story_session_operations'],
)
def story_id_session_post(id: UUID, body: CreateSessionRequest = ...):
    """
    Sessions: Create a Session
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/{id}/status',
    description=""" Returns code indicating whether story has active running background and is healthy (e.g., the latest outline is valid) """,
    tags=['story_management', 'story_status_operations'],
)
def story_id_status_get(id: UUID):
    """
    Story: Get Story Status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
